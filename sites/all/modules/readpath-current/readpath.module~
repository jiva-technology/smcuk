<?php
// $Id$

/**
 * @file
 * Creates a path of new posts for the user to follow.
 */

/**
 * Implementation of hook_perm().
 */
function readpath_perm() {
  return array('administer readpath',
                'access all readpath settings',);
}

/**
 * Implementation of hook_menu().
 */
function readpath_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    // Add menu entry for admin settings page
    $items[] = array(
               'path' => "admin/settings/readpath",
               'title' => t('readpath'),
               'callback' => 'drupal_get_form',
               'callback arguments' => array('readpath_settings_page'),
               'access' => user_access('administer readpath'),
    );
    
    // Add local callbacks for ignore/unignore functionality
    $items[] = array(
               'path' => "readpath/ignore",
               'title' => 'Marks a node as ignored.',
               'callback' => 'readpath_ignore_node',
               'type' => MENU_CALLBACK,
               );
    $items[] = array(
               'path' => "readpath/unignore",
               'title' => 'Marks a node as not ignored.',
               'callback' => 'readpath_unignore_node',
               'type' => MENU_CALLBACK,
               );
  }
  else {
    // Add user settings page.
    $accountid = arg(1);
    if (arg(0) == 'user' && is_numeric($accountid)) {
      global $user;
      $items[] = array(
            'path' => 'user/' . arg(1) . '/readpath',
            'title' => t('Readpath settings'),
            'callback' => 'drupal_get_form',
            'callback arguments' => array('readpath_user_settings'),
            'access' => (($user->uid == $accountid) || user_access('access all readpath settings')),
            'type' => MENU_LOCAL_TASK,
           );
     }
    
    
    // Add our jquery file & some variables needed for ignore/unignore
    drupal_add_js(drupal_get_path('module', 'readpath') . '/readpath.js');

    if ( arg(0) == 'node' && is_numeric(arg(1))) {
      $settings = array(
        'basePath' => base_path(),
        'nid'      => arg(1),
      );
  
      drupal_add_js($settings, 'setting');
    }
  }    
 
  return $items;
}

/**
 * Implementation of hook_user().
 */
function readpath_user($type, &$edit, &$user, $category = NULL) {
  switch ($type) {
    case 'delete':
      db_query('DELETE FROM {readpath_ignored_nodes} WHERE uid = %d', $user->uid);
      db_query('DELETE FROM {readpath_ignored_terms} WHERE uid = %d', $user->uid);
      break;
  }
}

/**
 * Implementation of hook_block().
 *
 * Generates a block containing the rest of the readpath as linked titles.
 *
 * This was added to aid in debugging but could be useful for users to see 
 * upcoming posts.
 */

function readpath_block($op = 'list', $delta = 0, $edit = array()) {
  switch ($op) {
    case 'list':
      $blocks[0]['info'] = t('Down the path');
      return $blocks;

    case 'view':
      if (user_access('access content')) {
        if ($delta == 0) {
          $title = t('Down the path');
            
          global $_SESSION;
          $readpath = $_SESSION['readpath'];

          if (!empty($readpath)) {
            $content = "<ul>";
            foreach ($readpath as $node) {
              $content .= "<li>" .  l($node->title, "node/$node->nid") . "</li>";
            }
            $content .= "<ul>";
            }
          }
        }

        $block['subject'] = $title;
        $block['content'] = $content;

   return $block;
  }
}

/**
 * Implementation of hook_form_alter().
 */
function readpath_form_alter($form_id, &$form) {
  // The ID of the node this comment form is attached to
  $current_nid = $form['nid']['#value'];
  
  if ($form_id == 'comment_form' && readpath_allowed_type($current_nid)) {    

    // Add Ignore / Unignore ajax button
    $page = $_GET['page'];
    if (readpath_node_is_ignored($current_nid)) {
      $hide_ignore_link = 'style="display:none"';
    }
    else {
      $hide_unignore_link = 'style="display:none"' ;   
    }
      
    $form['unignore_node'] = array(
            '#type' => 'markup',
            '#prefix' => ' <span class="unignore" '. $hide_unignore_link . '> ',
            '#value' => l(t('Unignore thread'),"readpath/unignore/$current_nid/r/$page"),
            '#suffix' => '</span> ',
            '#weight' => 50,
            );
    $form['ignore_node'] = array(
            '#type' => 'markup',
            '#prefix' => ' <span class="ignore" ' . $hide_ignore_link . '>',
            '#value' => l(t('Ignore thread'),"readpath/ignore/$current_nid/r/$page"),
            '#suffix' => '</span> ',
            '#weight' => 50,
            );
     
    
    // Take this node's ID out of the readpath since we are looking at it.
    readpath_remove_nid($current_nid);
    
    // If there are more new posts, get the node ID of the next one in line.
    $next_nid = readpath_get_next_nid();
    
    // If there is another unread post, add the post & go and pass options
    if (!empty($next_nid)) {
      $form['buttons']['submit_go'] = array(
            '#type' => 'submit',
            '#value' => t('Post & go'),
            '#weight' => 2,
            '#submit' => array('comment_form_submit'));
        
      // Get the query & fragment so we can jump to the correct comment. 
      $link_info = readpath_get_link_info($next_nid);
      $pass_link = l(t('Pass'), "node/$next_nid", NULL, $link_info['query'], $link_info['fragment']);   
      $form['pass'] = array(
        '#type' => 'markup', 
        '#prefix' => ' <span class="pass">',
        '#value' => $pass_link,
        '#suffix' => '</span> ',
        );   

      // Change the name of the normal submit button
     $form['submit']['#value'] = t('Post & view');
      
    } 
    else {
      // No need to add the jump links when there's nothing to jump to.
      $form['end'] = array('#type' => 'markup', '#value' => '<br /> No more new posts', '#weight' => 100);
    }  
  }
}

/**
 * Implementation of hook_comment().
 */
function readpath_comment($a1, $op) {
  if ($op == 'insert') {
    if ($a1['op'] == t('Post & go')) {
      // There can only be one destination for a form submit and we want that
      // to be the default "post & view". So we intercept the redirect here
      // when the "post & go" button was clicked and redirect it to the next
      // unread post.
    
      $next_nid = readpath_get_next_nid();
      
      // Mark the post we just commented on as read or we'll be brought
      // back to our own comment. 
      global $user;
      db_query("DELETE FROM {history} WHERE uid = %d AND nid = %d", $user->uid, $a1['nid']);
      db_query("INSERT INTO {history} (uid, nid, timestamp) VALUES (%d, %d, %d)", $user->uid, $a1['nid'], $a1['timestamp']);   

      // Double check that there is a next nid to avoid a bad redirect if someone
      // opens a post in one tab and then reads all the other new ones and then
      // tries to use the post & go on the already opened tab.
      if (!empty($next_nid)) {
        $link_info = readpath_get_link_info($next_nid);
        drupal_goto("node/$next_nid", $link_info['query'], $link_info['fragment']);
      }
    }
    else {
      // In the post & view mode, redirect to the comment they just made.
      drupal_goto('node/' . $a1['nid'], 'page=' . readpath_get_last_page($a1['nid']), 'comment-' . $a1['cid']);
    }
  }
}

/**
 * Define admin settings form.
 */
function readpath_settings_page() {
  //TODO: Create a settings page that allows the admin to select which node types to affect.
  // Currently it is hardcoded for forum nodes.
  
  // Send our form to Drupal to make a settings page
  return system_settings_form($form);
} 

/**
 * Define the settings form for individual users.
 *
 * At this time, the user can only ignore/unignore forums.
 */
function readpath_user_settings() {
  // Find the terms (forums) the user is ignoring.
  $accountid = arg(1);
  $ignored_terms = readpath_get_ignored_terms($accountid);
  
  // Get all forum terms
  $vocabulary = taxonomy_get_vocabulary(variable_get('forum_nav_vocabulary', ''));
  $result = db_query('SELECT tid, name, description FROM term_data WHERE vid = %d', $vocabulary->vid);
  
  while ($term = db_fetch_object($result)) {
    $options[$term->tid] = $term->name . ' - ' . $term->description;
  }
  
  $form['readpath_user_settings'] = array(
    '#type' => 'checkboxes', 
    '#title' => t('Check forums to ignore'), 
    '#default_value' => $ignored_terms,
    '#options' => $options,
    '#description' => t('Check a box to skip posts from that forum when following the read path.'),
  );
  
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save')
  );
  
  return $form;
}

/**
 * Do the (un)ignoring of terms (forums) based on the user's selection.
 */
function readpath_user_settings_submit($form_id, $form_values) {
  $accountid = arg(1);
  foreach ($form_values['readpath_user_settings'] as $tid => $value) {
    if ($value == 0) {
      readpath_unignore_term($tid, $accountid);
    }
    else {
      readpath_ignore_term($tid, $accountid);
    }    
  }
  
  drupal_set_message(t('Your settings have been saved.'));
}


/**
 * Removes the given node from the readpath.
 */
//TODO: Find a better way of removing an item than rewriting the whole array.
function readpath_remove_nid($nid) {
  global $_SESSION; 

  $temp_array = array();
  if (!empty($_SESSION['readpath'])) {
    foreach ($_SESSION['readpath'] as $item) {
      if ($item->nid != $nid) {
         $temp_array[] = $item;
     }
    }
    
    $_SESSION['readpath'] = $temp_array;
  }
}

/**
 * Retrieves the nid of the next unread post that fits the criteria.
 */
function readpath_get_next_nid() {
  global $_SESSION; 

  // If we have no more stored nids, fetch some more. 
  if (empty($_SESSION['readpath'])) {
    // Store the next N node IDs in the session variable to avoid hitting
    // the view every time.
    $_SESSION['readpath'] = readpath_get_next_nids();
  }

  // If nids were found, grab the next nid from the top of the list.
  if (!empty($_SESSION['readpath'])) {
    $next_node = $_SESSION['readpath'][0];
    $next_nid = $next_node->nid;
  }
  
  return $next_nid;
}

/**
 * Retrieve the nids of the next N unread posts that fit the criteria.
 */
 function readpath_get_next_nids() {  
  // Get the definition for the 'readpath' view, which filters the nodes by 
  // content type and sets the number of nids we want to grab in one shot. 
  $view = views_get_view('readpath');
  
  // Find the terms (forums) we want to filter out
  $ignored_terms = readpath_get_ignored_terms();
  
  // Fake a filter on taxonomy terms to control which forums are viewed.
  // Note that this is set to work only with the forum vocabulary at this time.
  //TODO: Make this work with any vocabulary.
  $vocabulary = taxonomy_get_vocabulary(variable_get('forum_nav_vocabulary', ''));
  $view->filter[] = array('vid' => $vocabulary->vid,
                          'tablename' => '',
                          'field' => 'term_node.tid',
                          'value' => $ignored_terms,
                          'operator' => 'NOR',
                          'options' => '',
                          'position' => '3',
                          'id' => 'term_node.tid',);
  
  // Need to clear cache so the query is rebuilt
  $view->is_cacheable = 0;
  
  // Fetch the items from the view
  $items = views_build_view('items', $view, array(), $view->use_pager, $view->nodes_per_block); 

  if (!empty($items['items'])) {
    // Get an array of the user's ignored threads.
    $ignored_nids = readpath_get_ignored_nodes();
    
    // Add the current node's id to the ignore list
    $ignored_nids[] = arg(1);

    // Run thru the views results and build the readpath, skipping
    // ignored items.
    $readpath = array();
    foreach ($items['items'] as $item) {
      $next_node = new stdClass;
      if (!in_array($item->nid, $ignored_nids)) {
        $next_node->nid = $item->nid;
        $next_node->title = $item->node_title;
        $readpath[] = $next_node;
      }
    }
    return $readpath;
  }
  else {
    // Nothing left unread that matches the criteria
    return array();
  }
}

/**
 * Given an nid, determines if the node type is one we want to affect.
 *
 * @param $nid
 *   The node ID to look up
* @return
 *   TRUE if the node type is on the list to form_alter the comment form.
 */
function readpath_allowed_type($nid) {
  $node = node_load($nid);
  $acceptable_types = variable_get('readpath_types', array('forum'));
  return in_array($node->type, $acceptable_types);
}

/**
 * Returns an array of the terms the readpath view should filter out.
 */
function readpath_get_ignored_terms($accountid = 0) {
  global $user;
  $ignored = array();
  
  // This allows us to affect a user other than the current user
  // in case an admin needs to edit a user's settings.
  if (empty($accountid)) {
    $uid = $user->uid;
  }
  else {
    $uid = $accountid;
  }
  
  // Fetch all ignored terms (forums) for the current user from the table
  $result = db_query("SELECT tid FROM {readpath_ignored_terms} WHERE uid = %d", $uid);
  
  // Put them into an array
  while ($item = db_fetch_object($result)) {
    $ignored[] = $item->tid;
  }
  
  return $ignored;

}

/**
 * Adds a term (forum) to the ignore list.
 */
function readpath_ignore_term($tid, $accountid = 0) {
  global $user;
  
  // This allows us to affect a user other than the current user
  // in case an admin needs to edit a user's settings.
  if (empty($accountid)) {
    $uid = $user->uid;
  }
  else {
    $uid = $accountid;
  }

  if ($tid > 0) {
    db_query("DELETE FROM {readpath_ignored_terms} WHERE uid = %d AND tid = %d", $user->uid, $tid);
    db_query("INSERT INTO {readpath_ignored_terms} (uid, tid, status) VALUES (%d, %d, %d)", $user->uid, $tid, 1);   
  }
}

/**
 * Removes an ignored term (forum) from the ignore list.
 */
function readpath_unignore_term($tid, $accountid = 0) {
  global $user;
  
  // This allows us to affect a user other than the current user
  // in case an admin needs to edit a user's settings.
  if (empty($accountid)) {
    $uid = $user->uid;
  }
  else {
    $uid = $accountid;
  }

  if ($tid > 0) {
    db_query("DELETE FROM {readpath_ignored_terms} WHERE uid = %d AND tid = %d", $user->uid, $tid);
  }
}

/**
 * Returns an array of nodes the user has chosen to ignore.
 */
function readpath_get_ignored_nodes() {
  global $user;
  $ignored = array();
  
  // Fetch all ignored threads (nids) for the current user from the table
  $result = db_query("SELECT nid FROM {readpath_ignored_nodes} WHERE uid = %d", $user->uid);
  
  // Put them into an array
  while ($item = db_fetch_object($result)) {
    $ignored[] = $item->nid;
  }
  
  return $ignored;
}

/**
 * Adds a node to the ignore list.
 */
function readpath_ignore_node($nid) {
  global $user;
  
  if ($nid == 0) {
    // If no nid passed in, get it from the URL
    $nid = arg(2);    
  }

  if ($nid > 0) {
    db_query("DELETE FROM {readpath_ignored_nodes} WHERE uid = %d AND nid = %d", $user->uid, $nid);
    db_query("INSERT INTO {readpath_ignored_nodes} (uid, nid) VALUES (%d, %d)", $user->uid, $nid);   
  }
  
  // Check if we need to redirect
  if (arg(3) == 'r') {
    $page = arg(4);
    drupal_goto("node/$nid", "page=$page");
  }

}

/**
 * Removes an ignored node from the ignore list.
 */
function readpath_unignore_node($nid) {
  global $user;
  
  if ($nid == 0) {
    // If no nid passed in, get it from the URL
    $nid = arg(2);
  }
  
  if ($nid > 0) {
    db_query("DELETE FROM {readpath_ignored_nodes} WHERE uid = %d AND nid = %d", $user->uid, $nid);
  }
  
  // Check if we need to redirect
  if (arg(3) == 'r') {
    $page = arg(4);
    drupal_goto("node/$nid", "page=$page");
  }
}

/**
 * Returns true if the given node is on the user's ignored list
 */
function readpath_node_is_ignored($nid) {
  global $user;
  
  if(db_result(db_query("SELECT nid FROM {readpath_ignored_nodes} WHERE uid = %d AND nid = %d", $user->uid, $nid))) {
    return TRUE;
  }
}

/**
 * Returns the ID of the first unread comment.
 *
 * @param $nid
 *   Node ID
 * @param $timestamp
 *   Date/time used to override when the user last viewed the node.
 * @return
 *   Comment ID
 */
 function readpath_first_new_comment($nid, $timestamp = 0) {
  global $user;

  if ($user->uid) {
    // Retrieve the timestamp at which the current user last viewed the
    // specified node.
    if (!$timestamp) {
      $timestamp = node_last_viewed($nid);
    }
    $timestamp = ($timestamp > NODE_NEW_LIMIT ? $timestamp : NODE_NEW_LIMIT);

    // Use the timestamp to retrieve the oldest new comment.
    $result = db_result(db_query('SELECT c.cid FROM {node} n INNER JOIN {comments} c ON n.nid = c.nid WHERE n.nid = %d AND timestamp > %d AND c.status = %d ORDER BY c.cid LIMIT 1', $nid, $timestamp, COMMENT_PUBLISHED));

    return $result;
  }
  else {
    return 0;
  }

}

/**
 * Determines the query & fragment parts of a link that will get us to the
 * first unread comment on the given node, no matter what page it's on.
 */
function readpath_get_link_info($nid) {
  $link_info = array();
  $number_new_comments = comment_num_new($nid);
  
  if ($number_new_comments > 0) {
    $node = node_load($nid);
    $comment_count = $node->comment_count;
    
    $link_info['query'] = comment_new_page_count($comment_count, $number_new_comments, $node);   
    
    $cid_of_first_new = readpath_first_new_comment($nid);   
    $link_info['fragment'] = "comment-$cid_of_first_new";
  }
  
  return $link_info;
}

/**
 * Returns the page number of the last page starting at 0 like the pager does.
 */
function readpath_get_last_page($nid = 0) {
  if ($nid == 0) {
    $nid = arg(1);
  }
  $node = node_load($nid);
  $comments_per_page = _comment_get_display_setting('comments_per_page', $node);
  $comment_count = $node->comment_count;
  $last_page = ceil($comment_count / $comments_per_page) - 1;
  return $last_page;
}

/**
 * returns TRUE if the user is looking at the last page of the thread.
 *
 * This is called from the theme to determine whether to show the add comment box.
 */
function readpath_on_last_page() {
  $last_page = readpath_get_last_page();
  return ($_GET['page'] == $last_page) || $last_page <= 0;
}

/**
 * This is copied directly from D6's comment module. It's also included in
 * advforum so we wrap it to avoid function name conflict.
 */
if (!module_exists('advanced_forum')) {
  function comment_new_page_count($num_comments, $new_replies, $node) {
    $comments_per_page = _comment_get_display_setting('comments_per_page', $node);
    $mode = _comment_get_display_setting('mode', $node);
    $order = _comment_get_display_setting('sort', $node);
    $pagenum = NULL;
    $flat = in_array($mode, array(COMMENT_MODE_FLAT_COLLAPSED, COMMENT_MODE_FLAT_EXPANDED));
    if ($num_comments <= $comments_per_page || ($flat && $order == COMMENT_ORDER_NEWEST_FIRST)) {
      // Only one page of comments or flat forum and newest first.
      // First new comment will always be on first page.
      $pageno = 0;
    }
    else {
      if ($flat) {
        // Flat comments and oldest first.
        $count = $num_comments - $new_replies;
      }
      else {
        // Threaded comments. See the documentation for comment_render().
        if ($order == COMMENT_ORDER_NEWEST_FIRST) {
          // Newest first: find the last thread with new comment
          $result = db_query('(SELECT thread FROM {comments} WHERE nid = %d  AND status = 0 ORDER BY timestamp DESC LIMIT %d) ORDER BY thread DESC LIMIT 1', $node->nid, $new_replies);
          $thread = db_result($result);
          $result_count = db_query("SELECT COUNT(*) FROM {comments} WHERE nid = %d AND status = 0 AND thread > '". $thread ."'", $node->nid);
        }
        else {
          // Oldest first: find the first thread with new comment
          $result = db_query('(SELECT thread FROM {comments} WHERE nid = %d  AND status = 0 ORDER BY timestamp DESC LIMIT %d) ORDER BY SUBSTRING(thread, 1, (LENGTH(thread) - 1)) LIMIT 1', $node->nid, $new_replies);
          $thread = substr(db_result($result), 0, -1);
          $result_count = db_query("SELECT COUNT(*) FROM {comments} WHERE nid = %d AND status = 0 AND SUBSTRING(thread, 1, (LENGTH(thread) - 1)) < '". $thread ."'", $node->nid);
        }
        $count = db_result($result_count);
      }
      $pageno =  $count / $comments_per_page;
    }
    if ($pageno >= 1) {
      $pagenum = "page=". intval($pageno);
    }
    return $pagenum;
  }
}

/**
 * Loads the included view.
 */
function readpath_views_default_views() {

  $views_dir = drupal_get_path('module', 'readpath');
  $views = array();

  include_once $views_dir . '/readpath_view.inc';
 
  return $views;
}

