<?php
// $Id: userlink.module,v 1.4.2.3 2007/06/20 17:32:47 marcp Exp $

/*
 * @file
 * Enables storing and retrieving of userlinks (or bookmarks).
 */


/**
 * Implementation of hook_node_info().
 */
function userlink_node_info() {
return array(
    'userlink' => array(
      'name' => t('Userlink'),
      'module' => 'userlink',
      'description' => t("Enables storing and retrieving of userlinks (or bookmarks)."),
    )
  );
}

/**
 * Implementation of hook_perm().
 */
function userlink_perm() {
  return array(
    'create userlinks',
    'view all userlinks',
    'edit all userlinks',
    'view own userlinks',
    'edit own userlinks'
  );
}

/**
 * Implementation of hook_access().
 */
function userlink_access($op, $node) {
  global $user;

  if ($op == 'create') {
    return user_access('create userlinks');
  }

  if ($op == 'update' || $op == 'delete') {
    if (user_access('edit all userlinks') || (user_access('edit own userlinks') && ($user->uid == $node->uid))) {
      return TRUE;
    }
  }
}

/**
 * Implementation of hook_user().
 */
function userlink_user($type, &$edit, &$user) {
  if ($type == 'view' && user_access('view all userlinks', $user)) {
    $items['userlinks'] = array('title' => t('Links'),
      'value' => l(t("View recent links"), "userlink/$user->uid/recent", array('title' => t("Read @username's links.", array('@username' => $user->name)))),
      'class' => 'userlink',
    );
    return array(t('History') => $items);
  }
}

/**
 * Implementation of hook_help().
 */
function userlink_help($section) {
  switch ($section) {
    case 'admin/help#userlink':
      return t("
      <p>The userlink module allows registered users to maintain a list of links (or bookmarks).</p>
      <p>A userlink is simply a URL along with a title and description.</p>");
    case 'node/add#userlink':
      return t("A userlink is a URL along with a title and description.");
  }
}

/**
 * Menu callback; displays a Drupal page containing recent blog entries.
 */
function userlink_page($a = NULL, $b = NULL, $c = NULL) {

  if (is_numeric($a)) { // $a is a user ID
    return userlink_page_user($a, $b, $c);
  }
  else {
    return userlink_page_last();
  }
}

function userlink_recent() {
  if (arg(1)) {
    if (is_numeric(arg(1))) {
      return userlink_page_user(arg(1));
    }
    else if (arg(1) == 'all') {
      return userlink_page_last();
    }
  }
  
  return 'no links to display';
}

/**
 *
 */
function userlink_homepage() {
  global $user;
  if ($user->uid == 0) {
    return userlink_page_last();
  }
  else {
    drupal_goto("userlink/$user->uid");
  }
}

function userlink_page_termlinks($tid) {
  return userlink_page_user(arg(1), 'term', $tid);
}

/**
 * Displays a Drupal page containing userlink entries of a given user.
 */
function userlink_page_user($uid, $command = NULL, $tid = NULL) {
  global $user;

  if ($uid) {
    if (is_numeric($uid)) {
      $name = userlink_name_from_uid($uid);
    }
    
    $output = '';

    if ($command == 'term') {
      if (is_numeric($uid)) {
        $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid WHERE tn.tid = %d AND n.type = 'userlink' AND n.uid = %d ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $tid, $uid);
      }
      else {
        $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid WHERE tn.tid = %d AND n.type = 'userlink' ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $tid);
      }
      
      if (db_num_rows($result)) {
        while ($node = db_fetch_object($result)) {
          $output .= node_view(node_load($node->nid), 1);
        }
    
        $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
      }
      else {
        $output = $name ? t("@name has not created any userlinks.", array('@name' => $name)) : t("There are no userlinks in the system.");
      }
    }
    else {
      if (($uid == $user->uid) && user_access('create userlinks')) {
        $output .= '<ul><li>'. l(t('Add new link.'), "node/add/userlink") .'</li></ul>';
      }

      $result = pager_query(db_rewrite_sql("SELECT n.nid, n.sticky, n.created FROM {node} n WHERE type = 'userlink' AND n.uid = %d ORDER BY n.sticky DESC, n.created DESC"), variable_get('default_nodes_main', 10), 0, NULL, $uid);
      
      if (db_num_rows($result)) {
        while ($node = db_fetch_object($result)) {
          $output .= node_view(node_load($node->nid), 1);
        }
    
        $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
      }
      else {
        $output = t("@name has not created any userlinks.", array('@name' => $name));
      }
    }
    
    return $output;
  }
  else {
    drupal_not_found();
  }
}

/**
 * Displays a Drupal page listing all users along with a link to their userlinks...
 */
function userlink_page_everyone() {
  $output = "<div class=\"help\"><p>Click on a user's name to see his/her links, or ". l('click here', 'userlink/all') ." to see all links in the system.</p></div>\n";
  
  $header = array(
    array('data' => t('Username'), 'field' => 'u.name', 'sort' => 'asc'),
    array('data' => t('# of Social Bookmarks'), 'field' => 'numlinks')
  );
  $sql = 'SELECT u.uid AS uid, u.name AS name, COUNT(*) AS numlinks FROM {node} n INNER JOIN {userlink} ul ON n.vid = ul.vid INNER JOIN {users} u ON n.uid = u.uid GROUP BY u.uid';
  $sql .= tablesort_sql($header);
  $sqlcount = 'SELECT COUNT(DISTINCT n.uid) FROM {node} n INNER JOIN {userlink} ul ON n.vid = ul.vid';
  $result = pager_query($sql, 50, 0, $sqlcount);

  while ($account = db_fetch_object($result)) {
    $rows[] = array(l($account->name, 'userlink/'. $account->uid), $account->numlinks);
  }

  $output .= theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);
  return $output;
}

/**
 * Displays a Drupal page containing recent userlink entries of all users.
 */
function userlink_page_last() {
  global $user;

  $output = '';

  $result = pager_query(db_rewrite_sql("SELECT n.nid, n.created FROM {node} n WHERE n.type = 'userlink' ORDER BY n.created DESC"), variable_get('default_nodes_main', 10));

  if (db_num_rows($result)) {
    while ($node = db_fetch_object($result)) {
      $output .= node_view(node_load($node->nid), 1);
    }

    $output .= theme('pager', NULL, variable_get('default_nodes_main', 10));
  }
  
  if (drupal_strlen($output) == 0) {
    $output = 'There are no links in the system.';
  }
  
  return $output;
}

function userlink_page_links() {
  $output = '';
  
  // Add the javascript for collapsible fieldsets...
  drupal_add_js('misc/collapse.js');
  
  drupal_add_css(drupal_get_path('module', 'userlink') .'/userlink.css');

  if (arg(1)) {
    $uid = arg(1);
    
    if (arg(1) == 'all') {
      $sql = "SELECT n.nid AS nid, tn.tid AS tid, td.name AS name FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'userlink' ORDER BY name";
    }
    else {
      $sql = "SELECT n.nid AS nid, tn.tid AS tid, td.name AS name FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'userlink' AND n.uid = $uid ORDER BY name";
      $name = userlink_name_from_uid($uid);
    }
  
    $result = db_query(db_rewrite_sql($sql));

    $group = '';
    $last_group = '';
    $num_in_group = 0;
    
    if (db_num_rows($result)) {
      while ($row = db_fetch_object($result)) {
        $node = node_load($row->nid);
        
        if ($row->name != $last_group) {
          if ($last_group != '') {
            $group .= "</ul>";
            $output .= theme('fieldset', array('#title' => $last_group, '#children' => $group, '#attributes' => array('class' => 'collapsible userlink-group')));
          }

          $group = "<ul>\n";
          
          $last_group = $row->name;
          $num_in_group = 0;
        }
        $group .= '<li>'. l($node->title, 'node/'. $node->nid) ."</li>\n";
        $num_in_group++;
      }      
      if ($num_in_group > 0) {
        $group .= "</ul>";
        $output .= theme('fieldset', array('#title' => $last_group, '#children' => $group, '#attributes' => array('class' => 'collapsible userlink-group')));
      }
    }
  }
  
  if (drupal_strlen($output) == 0) {
    $output = t('there are no links to display');
  }
  
  $output = '<form>'. $output .'</form>';
  return $output;
}

function userlink_page_category() {
  $header = array(
    array('data' => t('Category'), 'field' => 'name'),
    array('data' => t('# of links'), 'field' => 'numlinks', 'sort' => 'desc')
  );
  
  $uid = 0;
  
  if (arg(1) && is_numeric(arg(1))) {
    $uid = arg(1);
    
    $sql = "SELECT tn.tid AS tid, td.name AS name, COUNT(*) AS numlinks FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'userlink' AND n.uid = $uid GROUP BY tn.tid";
    $sql .= tablesort_sql($header);
    $sqlcount = "SELECT COUNT(DISTINCT tn.tid) FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'userlink' AND n.uid = $uid";
    
    $name = userlink_name_from_uid($uid);
  }
  else {
    $sql = "SELECT tn.tid AS tid, td.name AS name, COUNT(*) AS numlinks FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'userlink' GROUP BY tn.tid";
    $sql .= tablesort_sql($header);
    $sqlcount = "SELECT COUNT(DISTINCT tn.tid) FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'userlink'";
  }
  
  $result = pager_query($sql, 50, 0, $sqlcount);

  while ($category = db_fetch_object($result)) {
    if ($uid) {
      $url = 'userlink/'. $uid .'/term/'. $category->tid;
    }
    else {
      $url = 'userlink/all/term/'. $category->tid;
    }
  
    $rows[] = array(l($category->name, $url), $category->numlinks);
  }

  $output = theme('table', $header, $rows);
  $output .= theme('pager', NULL, 50, 0);
  return $output;
}

/**
 * Implementation of hook_form().
 */
function userlink_form(&$node) {

  $form['url'] = array('#type' => 'textfield', '#title' => t('URL'), '#required' => TRUE, '#default_value' => $node->url ? $node->url : 'http://', '#description' => t('The URL for this link (usually begins with http://).'), '#weight' => -50);
  $form['title'] = array('#type' => 'textfield', '#title' => t('Title'), '#required' => TRUE, '#default_value' => $node->title, '#description' => t('The title of this link.'), '#weight' => -30);
  $form['body'] = array(
    '#type' => 'textarea', '#title' => t('Description'), '#default_value' => $node->body, '#rows' => 20, '#required' => TRUE, '#weight' => -20
  );

  return $form;
}

/**
 * Implementation of hook_view().
 */
function userlink_view(&$node, $teaser = FALSE, $page = FALSE) {
  drupal_add_css(drupal_get_path('module', 'userlink') .'/userlink.css');
  
  if ($page) {
    // Breadcrumb navigation
    $breadcrumb[] = array('path' => 'userlink/all', 'title' => t('Social Bookmarks'));
    $breadcrumb[] = array('path' => 'userlink/'. $node->uid, 'title' => t("@name's links", array('@name' => $node->name)));
    $breadcrumb[] = array('path' => 'node/'. $node->nid);
    menu_set_location($breadcrumb);
  }

  $node = node_prepare($node, $teaser);
  
  // If the url is longer than X characters, just display the first X...
  $url = userlink_trim_url($node->url);
  
  // The link should always set a target window -- we are saving it
  // on a site-wide basis at this point...
  $atts = array('target' => variable_get('userlink_behavior', '_self'));

  // If there is a globally defined prefix, put it in the node's content...
  if (variable_get('userlink_prefix_yesno', 0)) {
    $prefix_name =  variable_get('userlink_prefix_name', 'Full story: ');
    $node->content['url-prefix'] = array(
      '#weight' => 0,
      '#prefix' => "<div class=\"userlink-prefix\">",
      '#value' => $prefix_name,
      '#suffix' => "</div>");
  }
  
  // By default, put the url above the body...
  $node->content['url'] = array(
    '#weight' => 1,  
    '#prefix' => "<div class=\"userlink-url\">",
    '#value' => l($url, $node->url, $atts),
    '#suffix' => "</div>");

  // Modify the weight of the body to drop it down... 
  $node->content['body']['#weight'] = 2;
    
  return $node;
}

/**
 * Implementation of hook_menu().
 */
function userlink_menu($may_cache) {
  global $user;
  $items = array();

  if ($may_cache) {
   $items[] = array(
      'path' => 'admin/settings/userlink',
      'title' => t('userlink'),
      'description' => t('Describes what the settings generally do.'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('userlink_admin_settings'),
      'access' => user_access('administer site configuration'),
      'type' => MENU_NORMAL_ITEM);    
    $items[] = array('path' => 'links', 'title' => t('Social Bookmarks'),
      'callback' => 'userlink_page',
      'access' => user_access('access content'),
      'type' => MENU_SUGGESTED_ITEM);
    $items[] = array('path' => 'userlink/homepage', 'title' => t('recent links'),
      'callback' => 'userlink_homepage',
      'access' => user_access('view all userlinks') || user_access('view own userlinks'),
      'type' => MENU_CALLBACK);
  }
  else {
    if (arg(0) == 'userlink') {
      if (is_numeric(arg(1)) || (arg(1) == 'all')) {
        $uid = arg(1);
  	  	
        $uname = is_numeric($uid) ? userlink_name_from_uid($uid) : null;

        $title = $uname ? "$uname's links..." : "all links...";

        $items[] = array('path' => 'userlink/'. $uid, 'title' => $title,
          'callback' => 'userlink_page_links',
          'access' => user_access('view all userlinks'),
          'type' => MENU_CALLBACK);
  		
        $items[] = array('path' => 'userlink/'. $uid .'/list', 'title' => t('by category'),
          'callback' => 'userlink_page_links',
          'access' => user_access('view all userlinks'),
          'type' => MENU_DEFAULT_LOCAL_TASK, 'weight' => -20);

        $items[] = array('path' => 'userlink/'. $uid .'/categories', 'title' => t('just categories'),
          'callback' => 'userlink_page_category',
          'type' => MENU_LOCAL_TASK, 'weight' => -10);
          
        $items[] = array('path' => 'userlink/'. $uid .'/everyone', 'title' => t("other users"),
          'callback' => 'userlink_page_everyone',
          'access' => user_access('view all userlinks'),
          'type' => MENU_LOCAL_TASK, 'weight' => 20);
        
        $items[] = array('path' => 'userlink/'. $uid .'/recent', 'title' => t('recent links'),
          'callback' => 'userlink_recent',
          'access' => user_access('view all userlinks'),
          'type' => MENU_LOCAL_TASK, 'weight' => 10);

        //
        //
        // If we are looking at a listing of links for a given term, add
        // another tab for the listing...
        //
        //
        if (arg(2) == 'term' && is_numeric(arg(3))) {
          $term = taxonomy_get_term(arg(3));
          $items[] = array('path' => 'userlink/'. $uid .'/term', 'title' => t("@who @termname links", array('@who' => $uname ? "$uname's" : 'all', '@termname' => $term->name)),
            'callback' => 'userlink_page_termlinks',
            'access' => user_access('view all userlinks'),
            'type' => MENU_LOCAL_TASK, 'weight' => 80);
        }
      }
    }
  }

  return $items;
}

/**
 * Implementation of hook_block().
 *
 */
function userlink_block($op = 'list', $delta = 0) {
  global $user;
  if ($op == 'list') {
    $block[0]['info'] = t('All Links');
    $block[1]['info'] = t('My Links');
    $block[2]['info'] = t('Recent Links');
    $block[3]['info'] = t('Popular Link Categories');
    $block[4]['info'] = t("User's Link Categories");
    $block[5]['info'] = t("Link Menu");
    return $block;
  }
  else if ($op == 'view') {
    if (($delta == 0) && user_access('view all userlinks')) {
      $block['content'] = userlink_list(db_query_range(db_rewrite_sql("SELECT n.nid, n.title, ul.url FROM {node} n INNER JOIN {userlink} ul ON n.vid = ul.vid WHERE n.type = 'userlink' ORDER BY n.title"), 0, 10));
      $block['content'] .= '<div class="more-link">'. l(t('more'), 'links', array('title' => t('See all the links.'))) .'</div>';
      $block['subject'] = t('All links');
      return $block;
    }
    else if (($delta == 1) && $user->uid && user_access('view own userlinks')) {
      $block['content'] = userlink_list(db_query_range(db_rewrite_sql("SELECT n.nid, n.title, ul.url FROM {node} n INNER JOIN {userlink} ul ON n.vid = ul.vid WHERE n.type = 'userlink' AND n.uid = $user->uid ORDER BY n.title"), 0, 10));
      $block['content'] .= '<div class="more-link">'. l(t('more'), 'userlink/'. $user->uid, array('title' => t('See all the links.'))) .'</div>';
      $block['subject'] = t('My Links');
      return $block;
    }
    else if (($delta == 2) && user_access('view all userlinks')) {
      $block['content'] = userlink_list(db_query_range(db_rewrite_sql("SELECT n.nid, n.title, ul.url FROM {node} n INNER JOIN {userlink} ul ON n.vid = ul.vid WHERE n.type = 'userlink' ORDER BY n.changed DESC"), 0, 10));
      $block['content'] .= '<div class="more-link">'. l(t('more'), 'links', array('title' => t('See all the links.'))) .'</div>';
      $block['subject'] = t('Recent Links');
      return $block;
    }
    else if (($delta == 3) && user_access('view all userlinks')) {
      $block['content'] = userlink_category_list(db_query_range(db_rewrite_sql("SELECT tn.tid AS tid, td.name AS name, COUNT(*) AS numlinks FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.type = 'userlink' GROUP BY tn.tid ORDER BY numlinks DESC"), 0, 10));
      $block['content'] .= '<div class="more-link">'. l(t('more'), 'userlink/all/categories', array('title' => t('See all the link categories.'))) .'</div>';
      $block['subject'] = t('Popular Link Categories');
      return $block;
    }
    else if (($delta == 4) && user_access('view all userlinks')) {
    	
    	// This block shows "the target user's" userlinks.  If we
    	// are on a page looking at some user's links, by category
    	// or otherwise, we want to show that user's categories.
    	//
    	// Also, if we are looking at a single userlink node, we
    	// want to show that node's owner's userlink categories.
    	
      if (arg(0) == 'userlink') {
        if (is_numeric(arg(1)) || arg(1) == 'homepage') {
          $uid = arg(1) == 'homepage' ? $user->uid : arg(1);
        }
      }
      else if ((arg(0) == 'node') && is_numeric(arg(1))) {
        $node = node_load(arg(1));
        if ($node->type == 'userlink') {
          $uid = $node->uid;
        }
      }

      if (!$uid || ($uid == 'all')) {
        if ($user->uid) {
          $uid = $user->uid;
        }
      }
      
      if ($uid) {
        $name = userlink_name_from_uid($uid);
        $block['content'] = userlink_category_list(db_query_range(db_rewrite_sql("SELECT tn.tid AS tid, td.name AS name, COUNT(*) AS numlinks FROM {node} n INNER JOIN {term_node} tn ON n.nid = tn.nid INNER JOIN {term_data} td ON tn.tid = td.tid WHERE n.uid = $uid AND n.type = 'userlink' GROUP BY tn.tid ORDER BY numlinks DESC"), 0, 5), $uid, $name);
        $block['content'] .= '<div class="more-link">'. l(t('more'), 'userlink/'. $uid, array('title' => t("See @name's link categories.", array('@name' => $name)))) .'</div>';

        if ($uid == $user->uid) {
          $block['subject'] = t("My Link Categories");
        }
        else {
          $block['subject'] = t("@name's Link Categories", array('@name' => $name));
        }
        return $block;
      }
    }
    else if (($delta == 5) && user_access('access content')) {
      if (user_access('create userlinks')) {
        $items[] = l("Add a link", 'node/add/userlink');
      }
      if ($user->uid) {
        $items[] = l('View my links', "userlink/$user->uid");
        $items[] = l('View my categories', "userlink/$user->uid/categories");
      }
      if (user_access('view all userlinks')) {
        $items[] = l("View everyone's links", 'userlink/all');
      }
      if (user_access('view all userlinks')) {
        $items[] = l("View everyone's categories", 'userlink/all/categories');
      }
      $items[] = l('View all users', "userlink/all/everyone");
      $block['content'] = theme('item_list', $items);
      $block['subject'] = t('Link Menu');
      return $block;
    }
  }
}

/**
 * Implementation of hook_load().
 */
function userlink_load($node) {
  $userlink = db_fetch_object(db_query("SELECT url, private FROM {userlink} WHERE vid = %d", $node->vid));
  return $userlink;
}

/**
 * Implementation of hook_delete().
 */
function userlink_delete($node) {
  db_query("DELETE FROM {userlink} WHERE nid = %d", $node->nid);
}

/**
 * Implementation of hook_insert().
 */
function userlink_insert($node) {
  db_query("INSERT INTO {userlink} (nid, vid, url, private) VALUES (%d, %d, '%s', %d)",
    $node->nid, $node->vid, $node->url, $node->private);
}

/**
 * Implementation of hook_update().
 */
function userlink_update($node) {
  if ($node->revision) {
    db_query("INSERT INTO {userlink} (nid, vid, url, private) VALUES (%d, %d, '%s', %d)",
      $node->nid, $node->vid, $node->url, $node->private);
  }
  else {
    db_query("UPDATE {userlink} SET url = '%s', private = %d WHERE vid = %d",
      $node->url, $node->private, $node->vid);
  }
}

/**
 * Gather a listing of links to userlinks.
 *
 * @param $result
 *   A DB result object from a query to fetch node objects.
 * @param $title
 *   A heading for the resulting list.
 *
 * @return
 *   An HTML list suitable as content for a block.
 */
function userlink_list($result, $title = NULL) {
  // The link should always set a target window -- we are saving it
  // on a site-wide basis at this point...
  $atts = array('target' => variable_get('userlink_behavior', '_self'));
  
  while ($node = db_fetch_object($result)) {
    $atts['title'] = $node->url;
    $items[] = l($node->title, $node->url, $atts);
  }

  return theme('item_list', $items, $title);
}

/**
 * Gather a listing of links to userlink categories.
 *
 * @param $result
 *   A DB result object from a query to fetch node objects.
 * @param $title
 *   A heading for the resulting list.
 *
 * @return
 *   An HTML list suitable as content for a block.
 */
function userlink_category_list($result, $uid = 0, $name = NULL) {
  while ($category = db_fetch_object($result)) {
    if ($uid) {
      $url = 'userlink/'. $uid .'/term/'. $category->tid;
    }
    else {
      $url = 'userlink/all/term/'. $category->tid;
    }
    $items[] = l($category->name, $url) ." <span class=\"userlink-count\">($category->numlinks)</span>";
  }
  
  return theme('item_list', $items);
}

/**
 * Return list of vids that describe userlink entries...
 *
 */
function userlink_vids() {
  $a = array();
  
  $result = db_query("SELECT vid FROM {vocabulary_node_types} WHERE type = 'userlink'");
  while ($row = db_fetch_array($result)) {
    $a[] = $row['vid'];
  }
  
  return $a;
}

function userlink_name_from_uid($uid) {
  $result = db_query("SELECT name FROM {users} u WHERE u.uid = $uid");
  return db_result($result);
}

function userlink_trim_url($url, $len = 70) {
  if (drupal_strlen($url) > $len) {
    $url = substr($url, 0, $len) .'...';
  }
  
  return $url;
}

function userlink_admin_settings() {

  $form['userlink_behavior'] = array('#type' => 'select',
          '#options' => array('_self' => 'link appears in the same window',
                              '_blank' => 'link appears in its own target window',
                              'link-target' => 'link appears in a single target window'),
          '#title' => t('What happens when a link is clicked'),
          '#default_value' => variable_get('userlink_behavior', '_self'),
          '#description' => t("The window where the linked page will appear after it is clicked on a user's page."));

  $form['userlink_prefix_yesno'] = array('#type' => 'checkbox',
          '#title' => t('Show a link prefix?'),
          '#default_value' => variable_get('userlink_prefix_yesno', 0),
          '#description' => t("Select to prefix the userlink with a caption."));

  $form['userlink_prefix_name'] = array('#type' => 'textfield',
          '#title' => t('Prefix caption text'),
          '#size' => 25,
          '#default_value' => variable_get('userlink_prefix_name', 'Full story: '),
          '#description' => t("Enter the prefix text that will be displayed before the link text."),
          '#maxlength' => 25,
          '#required' => FALSE,
          '#field_prefix' => 'Text: ');

  return system_settings_form($form);
}

/**
 * Implementation of hook_views_tables().
 *
 */
function userlink_views_tables() {
  $tables['userlink'] = array(
    'name' => 'userlink',
    'provider' => 'internal',
    'join' => array(
      'left' => array(
        'table' => 'node',
        'field' => 'vid'
      ),
      'right' => array(
        'field' => 'vid'
      )
    ),
    'fields' => array(
      'url' => array(
        'name' => t('Userlink: url'),
        'handler' => array(
          'userlink_views_handler_url_as_link'    => t('As Link'),
          'userlink_views_handler_url_not_as_link' => t('Without Link'),
        ),
        'sortable' => true,
        'help' => t('Display the url for this userlink'),
      ),
    ),
    'sorts' => array(
      'url' => array(
        'name' => t('Userlink: url'),
        'help' => t('Sort by url'),
      ),
    ),
  );

  return $tables;
}

function userlink_views_handler_url_as_link($fieldinfo, $fielddata, $value, $data) {
  return l($value, $value);
}

function userlink_views_handler_url_not_as_link($fieldinfo, $fielddata, $value, $data) {
  return check_plain($value);
}
