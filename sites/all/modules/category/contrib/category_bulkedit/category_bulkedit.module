<?php
// $Id: category_bulkedit.module,v 1.10 2007/01/05 15:31:15 jaza Exp $

/**
 * @file
 * Provides an interface for editing multiple categories or containers at once.
 *
 * Much of the code here is based on the Drupal 4.7 multipage forms template:
 * http://cvs.drupal.org/viewcvs/drupal/contributions/docs/developer/ ->
 * examples/multipage_form_example.module?view=markup
 */

/**
 * Implementation of hook_help().
 */
function category_bulkedit_help($section) {
  switch ($section) {
    case 'admin/content/category/bulkedit':
      return _category_bulkedit_set_help_text();
  }

  if (preg_match('/^admin\/content\/category\/\d+\/bulkedit$/', $section)) {
    return _category_bulkedit_set_help_text();
  }
}

/**
 * Implementation of hook_menu().
 */
function category_bulkedit_menu($may_cache) {
  $items = array();

  if ($may_cache) {
    $items[] = array(
      'path' => 'admin/content/category/bulkedit',
      'title' => t('Bulk edit'),
      'callback' => 'drupal_get_form',
      'callback arguments' => array('category_bulkedit_form', 'category_cont', NULL),
      'access' => user_access('administer categories'),
      'type' => MENU_LOCAL_TASK,
      'weight' => 8,
    );
  }
  else {
    if (arg(0) == 'admin' && arg(2) == 'category' && is_numeric(arg(3))) {
      $nid = arg(3);
      $items[] = array(
        'path' => 'admin/content/category/'. $nid .'/bulkedit',
        'title' => t('Bulk edit'),
        'callback' => 'drupal_get_form',
        'callback arguments' => array('category_bulkedit_form', 'category_cat', $nid),
        'access' => user_access('administer categories'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 8,
      );
    }
  }

  return $items;
}

/**
 * Displays the multipage form for bulk editing of categories or containers.
 */
function category_bulkedit_form($type = 'category_cont', $cnid = NULL, $form_values = NULL) {
  $form = array();
  $is_cat = is_numeric(arg(3));

  // In a multistep form, drupal_get_form() will always
  // pass the incoming form values to you after any other
  // parameters that you specify manually. Do this instead
  // of looking at the incoming $_POST variable manually.

  if (!isset($_POST['op'])) {
    $step = 1;
    $_SESSION['category_bulkedit'] = NULL;
  }
  elseif ($form_values['op'] == t('Back')) {
    $step = $form_values['step'] - 1;
  }
  else {
    $step = $form_values['step'] + 1;
  }

  $form['step'] = array(
    '#type' => 'hidden',
    '#value' => $step,
  );
  $form['#theme'] = 'category_bulkedit_form_step'. $step;

  switch ($step) {
    case 1:
    case 2:
    case 4:
      // Category / container selection, page 1
      $list_items = array();
      if ($type == 'category_cont') {
        $containers = category_get_containers();
        foreach ($containers as $value) {
          $list_items[$value->cid] = $value->admin_title;
        }
      }
      else {
        $categories = category_get_tree($cnid);
        foreach ($categories as $value) {
          $list_items[$value->cid] = $value->title;
        }
      }
      foreach ($list_items as $nid => $title) {
        if ($step == 1) {
          $form['bulkedit'][$nid] = array(
            '#type' => 'checkbox',
            '#default_value' => !empty($_SESSION['category_bulkedit']['step_1']['bulkedit'][$nid]) ? 1 : 0,
          );
          $form['nids'][$nid] = array(
            '#type' => 'markup',
            '#value' => $nid,
          );
        }
        if ($step == 1 || $step == 4) {
          $form['titles'][$nid] = array(
            '#type' => 'markup',
            '#value' => l($title, 'node/'. $nid),
          );
        }
      }

      if ($step == 1) {
        $form['bulkedit']['#tree'] = TRUE;
        $form['nids']['#tree'] = TRUE;
      }
      if ($step == 1 || $step == 4) {
        // Add a back button
        $form['back'] = array(
          '#type'          => 'button',
          '#value'         => t('Back'),
          '#weight'        => 35,
        );
        $form['titles']['#tree'] = TRUE;
      }

      // Field selection, page 2
      $editing_form = category_get_form($is_cat, NULL, FALSE);
      $field_selections = _category_bulkedit_get_field_selections($editing_form);

      foreach ($field_selections as $field => $value) {
        if ($step == 2) {
          $form['bulkedit_fields'][$field] = array(
            '#type' => 'checkbox',
            '#default_value' => !empty($_SESSION['category_bulkedit']['step_2']['bulkedit_fields'][$field]) ? 1 : 0,
          );
          $form['field_types'][$field] = array(
            '#type' => 'markup',
            '#value' => $value['type'],
          );
          $form['field_groups'][$field] = array(
            '#type' => 'markup',
            '#value' => implode(' -> ', $value['groups']),
          );
        }
        if ($step == 2 || $step == 4) {
          $form['field_titles'][$field] = array(
            '#type' => 'markup',
            '#value' => $value['title'],
          );
        }
      }
      if ($step == 2) {
        $form['bulkedit_fields']['#tree'] = TRUE;
        $form['field_types']['#tree'] = TRUE;
        $form['field_groups']['#tree'] = TRUE;
      }
      if ($step == 2 || $step == 4) {
        $form['field_titles']['#tree'] = TRUE;
      }

      if ($step == 2) {
        // Add a back button
        $form['back'] = array(
          '#type'          => 'button',
          '#value'         => t('Back'),
          '#weight'        => 35,
        );
      }
      break;

    case 3:
      // Form field editing, page 3
      $editing_form = category_get_form($is_cat, (!empty($_SESSION['category_bulkedit']['step_3']) ? (object) $_SESSION['category_bulkedit']['step_3'] : NULL), FALSE);
      foreach (element_children($editing_form) as $fieldset_key) {
        foreach (element_children($editing_form[$fieldset_key]) as $form_key) {
          if (empty($_SESSION['category_bulkedit']['step_2']['bulkedit_fields'][$form_key])) {
            unset($editing_form[$fieldset_key][$form_key]);
          }
        }
      }
      _category_bulkedit_check_fieldsets($editing_form);

      $form += $editing_form;

      // Add a back button
      $form['back'] = array(
        '#type'          => 'button',
        '#value'         => t('Back'),
        '#weight'        => 35,
      );
      break;
  }

  // This part is important!
  $form['#multistep'] = TRUE;
  $form['#redirect'] = FALSE;

  // Also a submit button (since this is not the node form, none has been
  // provided for us)
  $submit_text = array(NULL, t('Next (field selection)'), t('Next (field editing)'), t('Next (preview changes)'), t('Run bulk edit'));
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' =>  $submit_text[$step],
    '#weight' => 45
  );

  return $form;
}

/*
 * Themes the multipage form for step 1.
 */
function theme_category_bulkedit_form_step1($form) {
  $content = '';
  $is_cat = is_numeric(arg(3));

  $rows = array();

  $elements = element_children($form['nids']);
  if (!empty($elements)) {
    foreach ($elements as $key) {
      $row = array();
      $form['bulkedit'][$key]['#value'] = $form['bulkedit'][$key]['#default_value'];
      $row[] = drupal_render($form['bulkedit'][$key]);
      $row[] = drupal_render($form['titles'][$key]);
      $row[] = drupal_render($form['nids'][$key]);

      $rows[] = $row;
    }
  }
  else {
    $rows[] = array(array('data' => t('No @items available', array('@items' => $is_cat ? t('categories') : t('containers'))), 'colspan' => 3));
    unset($form['submit']);
  }

  $header = array(theme('table_select_header_cell'), t('Title'), t('Node ID'));

  $content .= theme('table', $header, $rows);

  $content .= drupal_render($form);

  _category_bulkedit_set_help_text(1, $is_cat);

  return $content;
}

/*
 * Themes the multipage form for step 2.
 */
function theme_category_bulkedit_form_step2($form) {
  $content = '';
  $is_cat = is_numeric(arg(3));

  $rows = array();

  $elements = element_children($form['bulkedit_fields']);
  if (!empty($elements)) {
    foreach ($elements as $key) {
      $row = array();
      $form['bulkedit_fields'][$key]['#value'] = $form['bulkedit_fields'][$key]['#default_value'];
      $row[] = drupal_render($form['bulkedit_fields'][$key]);
      $row[] = drupal_render($form['field_titles'][$key]);
      $row[] = drupal_render($form['field_types'][$key]);
      $row[] = drupal_render($form['field_groups'][$key]);

      $rows[] = $row;
    }
  }
  else {
    $rows[] = array(array('data' => t('No fields available'), 'colspan' => 4));
    unset($form['submit']);
  }

  $header = array(theme('table_select_header_cell'), t('Title'), t('Type'), t('Group(s)'));

  $content .= theme('table', $header, $rows);

  $content .= drupal_render($form);

  _category_bulkedit_set_help_text(2, $is_cat);

  return $content;
}

/*
 * Themes the multipage form for step 3.
 */
function theme_category_bulkedit_form_step3($form) {
  $content = drupal_render($form);

  _category_bulkedit_set_help_text(3, $is_cat);

  return $content;
}

/*
 * Themes the multipage form for step 4.
 */
function theme_category_bulkedit_form_step4($form) {
  $content = '';
  $is_cat = is_numeric(arg(3));

  drupal_add_css(drupal_get_path('module', 'category_bulkedit'). '/category_bulkedit.css');

  // Nodes to be edited - display
  $rows = array();

  $items = array();
  if (!empty($_SESSION['category_bulkedit']['step_1']['bulkedit'])) {
    foreach (element_children($_SESSION['category_bulkedit']['step_1']['bulkedit']) as $bulkedit_key) {
      if (!empty($_SESSION['category_bulkedit']['step_1']['bulkedit'][$bulkedit_key])) {
        $items[$bulkedit_key] = $_SESSION['category_bulkedit']['step_1']['bulkedit'][$bulkedit_key];
      }
    }
  }

  $num_cols = 3;
  if (!empty($items)) {
    $total = count($items);
    $one_row = $total < $num_cols;
    $num_lists = $one_row ? $total : $num_cols;
    $offset = $one_row ? 1 : floor($total / $num_cols);
    $offset_less = 0;
    $remainder = $total % $num_cols;
    $items_formatted = array();

    foreach ($items as $key => $value) {
      $item_formatted = drupal_render($form['titles'][$key]);
      if (isset($form['titles'][$key])) {
        $items_formatted[] = $item_formatted;
      }
    }
    unset($form['titles']);

    $item_output = '<p><strong>'. t('@items to be bulk edited:', array('@items' => ($is_cat ? t('Categories') : t('Containers')))). "</strong></p>\n";

    $count = 0;
    while ($count < $num_lists) {
      $item_output .= "<ul class=\"category-bulkedit-floated-list\">\n<li>";
      $items_slice = NULL;
      $curr_offset = ($count * $offset) + $offset_less;
      $curr_length = $offset;
      if ($remainder && !$one_row) {
        $curr_length++;
        $remainder--;
        $offset_less++;
      }
      if ($num_cols - $count > 1) {
        $items_slice = array_slice($items_formatted, $curr_offset, $curr_length);
      }
      else {
        $items_slice = array_slice($items_formatted, $curr_offset);
      }
      $item_output .= implode("</li>\n<li>", $items_slice);
      $item_output .= "</li>\n</ul>\n";

      $count++;
    }

    $content .= $item_output;
  }

  // Fields and values to be edited - display
  $fields = array();
  if (!empty($_SESSION['category_bulkedit']['step_2']['bulkedit_fields'])) {
    foreach (element_children($_SESSION['category_bulkedit']['step_2']['bulkedit_fields']) as $bulkedit_key) {
      if (!empty($_SESSION['category_bulkedit']['step_2']['bulkedit_fields'][$bulkedit_key])) {
        $fields[$bulkedit_key] = $_SESSION['category_bulkedit']['step_2']['bulkedit_fields'][$bulkedit_key];
      }
    }
  }
  $field_output = '<p class="category-bulkedit-clear"><strong>'. t('Fields to be bulk edited, and values to be saved:'). "</strong></p>\n";

  $rows = array();
  _category_bulkedit_flatten_fields_copy($form);

  if (!empty($fields)) {
    $editing_form = category_get_form($is_cat, NULL, FALSE);
    $field_selections = _category_bulkedit_get_field_selections($editing_form);

    foreach ($fields as $key => $value) {
      $row = array();
      $row[] = $field_selections[$key]['title'];
      $form[$key]['#theme'] = 'category_bulkedit_field_preview';
      theme('category_bulkedit_field_preview', $form[$key], TRUE);
      $form[$key]['#type'] = 'markup';
      $form[$key]['#value'] = NULL;
      drupal_render($form[$key]);
      $row[] = check_plain($_SESSION['category_bulkedit']['step_3'][$key]);
      $rows[] = $row;
    }
    unset($form['field_titles']);
  }
  else {
    $rows[] = array(array('data' => t('No fields available'), 'colspan' => 2));
    unset($form['submit']);
  }

  $header = array(t('Field'), t('Value'));
  $field_output .= theme('table', $header, $rows);

  $content .= $field_output;

  $content .= '<p>'. t('When you click the <em>run bulk edit</em> button below, the bulk edit will be performed. The operation may take some time to complete, so please be patient and do not interrupt the process. This operation is <strong>irreversible</strong>, and it will potentially affect a large amount of data on your site. Please ensure that you have thoroughly checked all the information displayed on this page before proceeding.'). "</p>\n";

  $content .= drupal_render($form);

  _category_bulkedit_set_help_text(4, $is_cat);

  return $content;
}

/*
 * Special theme handler for form values that are 'previewed' on page 4 of the
 * form (but are set on page 3).
 */
function theme_category_bulkedit_field_preview($element, $orig = FALSE) {
  global $form_values;
  static $orig_element;

  if ($orig) {
    $orig_element = $element;
    return;
  }

  $output = $form_values[str_replace('edit-', '', $element['#id'])];

  if (isset($orig_element['#options'])) {
    if (is_array($output)) {
      $selected = array();
      foreach ($output as $key => $value) {
        if (isset($value) && $value != '') {
          $selected[] = $orig_element['#options'][$key];
        }
      }
      $output = implode(', ', $selected);
    }
    else {
      $output = $orig_element['#options'][$output];
    }
  }
  elseif (isset($orig_element['#return_value'])) {
    $output = ($output == $orig_element['#return_value']) ? t('Yes') : t('No');
  }
  if ($output == '') {
    $output = '<em>'. t('(none)'). '</em>';
  }

  return $output;
}

/**
 * Validate our form.
 */
function category_bulkedit_form_validate($form_id, $form_values) {
  if (isset($form_values['op']) && $form_values['op'] != t('Back')) {
    $is_cat = is_numeric(arg(3));

    switch ($form_values['step']) {
      case 1:
        $items_selected = FALSE;

        if (isset($form_values['bulkedit']) && is_array($form_values['bulkedit'])) {
          foreach ($form_values['bulkedit'] as $value) {
            if ($value) {
              $items_selected = TRUE;
              break;
            }
          }
        }

        if (!$items_selected) {
          form_set_error('bulkedit', t('You must select at least one @item.', array('@item' => ($is_cat ? t('category') : t('container')))));
        }
        break;

      case 2:
        $items_selected = FALSE;

        if (isset($form_values['bulkedit_fields']) && is_array($form_values['bulkedit_fields'])) {
          foreach ($form_values['bulkedit_fields'] as $value) {
            if ($value) {
              $items_selected = TRUE;
              break;
            }
          }
        }

        if (!$items_selected) {
          form_set_error('bulkedit', t('You must select at least one field.'));
        }
        break;
    }
  }
}

/*
 * Handles form submission. Goes through all the selected nodes, and for each
 * node, gathers all the values that have been set, and saves the node with
 * those new values.
 */
function category_bulkedit_form_submit($form_id, $form_values) {
  $is_cat = is_numeric(arg(3));

  switch ($form_values['step']) {
    case 1:
    case 2:
    case 3:
      $_SESSION['category_bulkedit']['step_'. $form_values['step']] = $form_values;
      break;
    case 4:
      // Process the form data from step 4
      foreach (array(1, 2, 3) as $step_key) {
        $form_values += $_SESSION['category_bulkedit']['step_'. $step_key];
      }
      if (!isset($form_values['parents']) || !is_array($form_values['parents'])) {
        $form_values['parents'] = array($form_values['parents']);
      }
      if (empty($form_values['parents'][0])) {
        if ($is_cat) {
          $form_values['parents'][0] = arg(3);
        }
        else {
          unset($form_values['parents'][0]);
        }
      }
      if (!isset($form_values['nodes']) || !is_array($form_values['nodes'])) {
        $form_values['nodes'] = array($form_values['nodes']);
      }
      if (empty($form_values['nodes'][0])) {
        unset($form_values['nodes'][0]);
      }

      if (isset($form_values['bulkedit']) && is_array($form_values['bulkedit'])) {
        $saved_count = 0;
        foreach ($form_values['bulkedit'] as $nid => $value) {
          if ($value && is_numeric($nid)) {
            $node = node_load($nid);

            if (isset($form_values['bulkedit_fields']) && is_array($form_values['bulkedit_fields'])) {
              foreach ($form_values['bulkedit_fields'] as $field => $field_value) {
                if ($field_value) {
                  $node->$field = $form_values[$field];
                }
              }
            }

            $node->date = date('j M Y H:i:s', $node->created);

            $node = node_submit($node);

            node_save($node);
            $saved_count++;
          }
        }

        drupal_set_message(t('%count @items were successfully bulk edited.', array('%count' => $saved_count, '@items' => ($is_cat ? t('categories') : t('containers')))));
        $_SESSION['category_bulkedit'] = NULL;

        drupal_goto('admin/content/category'. ($is_cat ? '/'. arg(3) : ''));
      }
      break;
  }
}

function _category_bulkedit_check_fieldsets(&$form) {
  foreach (element_children($form) as $key) {
    $children = element_children($form[$key]);

    if ($form[$key]['#type'] == 'fieldset') {
      if (empty($children)) {
        unset($form[$key]);
      }
      else {
        _category_bulkedit_check_fieldsets($form[$key]);
        $children = element_children($form[$key]);
        if (empty($children)) {
          unset($form[$key]);
        }
        else {
          $form[$key]['#collapsed'] = FALSE;
        }
      }
    }
  }
}

function _category_bulkedit_flatten_fields_copy(&$form) {
  foreach (element_children($form) as $key) {
    if ($form[$key]['#category_bulkedit_original_#type'] == 'fieldset') {
      $children = element_children($form[$key]);
      _category_bulkedit_flatten_fields_copy($form[$key]);
      if (!empty($children)) {
        foreach ($children as $child_key) {
          $form[$child_key] = $form[$key][$child_key];
        }
      }
    }
  }
}

function _category_bulkedit_get_field_selections($editing_fields, $groups = array()) {
  $fields = array();

  foreach (element_children($editing_fields) as $key) {
    $children = element_children($editing_fields[$key]);
    if (empty($children)) {
      $fields[$key] = array('title' => $editing_fields[$key]['#title'], 'type' => $editing_fields[$key]['#type'], 'groups' => $groups);
    }
    else {
      $fields += _category_bulkedit_get_field_selections($editing_fields[$key], $groups + array($editing_fields[$key]['#title']));
    }
  }

  return $fields;
}

/**
 * Sets or returns the current help text for the page.
 */
function _category_bulkedit_set_help_text($page = NULL, $is_cat = NULL) {
  static $output = '';

  if (isset($page)) {
    $item_type = $is_cat ? t('category') : t('container');
    $item_type_plural = $is_cat ? t('categories') : t('containers');

    switch ($page) {
      case 1:
        $output = t('<strong>Step 1: @item selection</strong>. Please select the @items that you wish to bulk edit, by ticking the relevant check boxes in the table below.', array('@item' => $item_type, '@items' => $item_type_plural));
        break;

      case 2:
        $output = t('<strong>Step 2: field selection</strong>. Please select the fields that you wish to bulk edit for your chosen @items, by ticking the relevant check boxes in the table below.', array('@items' => $item_type_plural));
        break;

      case 3:
        $output = t('<strong>Step 3: field editing</strong>. Please edit the selected fields for your chosen @items in the form below.', array('@items' => $item_type_plural));
        break;

      case 4:
        $output = t('<strong>Step 4: preview changes</strong>. Please check all the information given on this page, and if anything is wrong, go back and change your selections where necessary.');
        break;
    }
  }

  return $output;
}
