<?php
// $Id: advanced_forum.module,v 1.54 2008/05/12 04:18:51 michellec Exp $

/*****************************************************************************/
/******************************** HOOKS **************************************/
/*****************************************************************************/

/**
 * Implementation of hook_perm().
*/
function advanced_forum_perm() {
  return array('administer advanced forum');
}

/**
 * Implementation of hook_menu.
 */
function advanced_forum_menu($may_cache) {
  $items = array();
  if ($may_cache) {
    global $user;
    $items[] = array(
               'path' => "forum/markasread",
               'title' => 'Helper page to mark forums read.',
               'callback' => 'advanced_forum_markasread',
               'access' => user_access('access content') && $user->uid,
               'type' => MENU_CALLBACK,
               );
    // Add menu entry for settings page
    $items[] = array(
               'path' => "admin/settings/advanced-forum",
               'title' => t('Advanced Forum'),
               'callback' => 'drupal_get_form',
               'callback arguments' => array('advanced_forum_settings_page'),
               'access' => user_access('administer advanced forum'),
    );
  } 
  elseif(arg(2) != 'block') {
    // Avoids weird issue with block admin. See #239724
    // Should be replaced with a proper fix if one can be found.
    advanced_forum_add_css();
  }
  
  return $items;
}

/*****************************************************************************/
/************************* SETTINGS PAGE *************************************/
/*****************************************************************************/

/**
 * Define settings form
 */
function advanced_forum_settings_page() {
  $form['advanced_forum_themedir'] = array(
    '#type' => 'textfield',
    '#title' => t('Advanced forum theme directory'),
    '#size' => 25,
    '#description' => t('Path from site theme directory to advanced forum theme directory. Defaults to "advforum"'),
    '#default_value' => variable_get('advanced_forum_themedir','advforum'),
  );
  
  $form['advanced_forum_theme_all_comments'] = array(
    '#type' => 'radios',
    '#title' => t('Treat all site comments like forum comments'),
    '#options' => array("No","Yes"),
    '#description' => t('Choosing yes causes advanced forum to consider every comment a forum comment and attempt to theme it that way. Some changes to your theme may be required.'),
    '#default_value' => variable_get('advanced_forum_theme_all_comments',0),
  );

  // Send our form to Drupal to make a settings page
  return system_settings_form($form);
} 

/*****************************************************************************/
/******************* TEMPLATE PREPROCESS *************************************/
/*****************************************************************************/

/**
 * D5 compatability wrapper for node/comment preprocess functions.
 */
function advanced_forum_addvars($hook, $vars) {
  switch ($hook) {
    case 'node':
      advanced_forum_preprocess_node($vars);
      break;
    case 'comment':
      advanced_forum_preprocess_comment($vars);
      break;
  }

  return $vars;
}

function advanced_forum_preprocess_node(&$vars) {
  if (_is_forum('node', $vars)) {
    // Use our combined node/comment template file
    // D5 won't find templates in subdirectories so we need to give it that
    $forum_theme = advanced_forum_get_forum_theme_directory();
    $vars['template_files'][] = "$forum_theme/advf-forum-post";

    // The node is the first post, aka topic
    $vars['top_post'] = TRUE;
    
    // Node is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;
    
    if (!empty($vars['node']->links) && !empty($vars['node']->links['comment_add'])) {
      // Change first post from "add comment" to "Reply"
      $vars['node']->links['comment_add']['title'] = t('Reply');
      $vars['links'] = theme('links', $vars['node']->links, array('class' => 'links inline forumlinks'));
      
      // Make a separate variable for the reply link so it can be put on top of the thread
      $reply_link = $vars['node']->links['comment_add'];
      $reply_link['title'] = t("Post Reply");
      $vars['reply_link'] = theme('links', array('topic_reply' => $reply_link), array('class' => 'forumlinks'));
    }
    
    // Jump to first unread comment
    $comment_count = $vars['comment_count'];
    if ($comment_count > 0) {
      $nid = $vars['node']->nid;
      $current_page = $_GET['page'];
      $number_new_comments = comment_num_new($nid);
      
      if ($number_new_comments > 0) {
        $page_of_first_new = comment_new_page_count($comment_count, $number_new_comments, $vars['node']->nid);   
        $cid_of_first_new = advanced_forum_first_new_comment($nid);   
        $vars['jump_first_new'] = l("$number_new_comments new replies", 'node/' . $nid, NULL, $page_of_first_new, "comment-$cid_of_first_new");
      }
    }
    
    // Make an array version of $links
    $vars['links_array'] = $vars['node']->links;

    // User information
    $vars['account'] = user_load(array('uid' => $vars['node']->uid));
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);   
  }
}

function advanced_forum_preprocess_comment(&$vars) {
  if (_is_forum('comment', $vars)) {
    // Use our combined node/comment template file
    // D5 won't find templates in subdirectories so we need to give it that
    $forum_theme = advanced_forum_get_forum_theme_directory();
    $vars['template_files'][] = "$forum_theme/advf-forum-post";
    
    // Thread is being shown in the forum (not on the front page or in a view)
    $vars['is_forum'] = TRUE;
    
    // This is a comment, not the node.
    $vars['top_post'] = FALSE;

    // We need some information from the parent node so load it here
    $node = node_load($vars['comment']->nid);
    $vars['node'] = $node;

    // Title
    if (variable_get('comment_subject_field', 1) == 0) {
      // if comment titles are disabled, don't display it.
      $vars['title'] = '';
    } else {
      // Assign the subject to the title variable for consistancy with nodes.
      $vars['title'] = check_plain($vars['comment']->subject);
    }
    
    // Just use the date for the submitted on.
    $vars['submitted'] = format_date($vars['comment']->timestamp);

    // Assign the comment to the content variable for consistancy with nodes.
    $vars['content'] = $vars['comment']->comment;
      
    // User information
    $accountid = $vars['comment']->uid;
    if ($accountid == 0) {
      // Anonymous user. Make a fake user object for theme_username
      $vars['account']->name = $vars['comment']->name;
      $vars['account']->homepage = $vars['comment']->homepage;
    }
    else {
      // Load up the real user object
      $vars['account'] = user_load(array('uid' => $vars['comment']->uid));
    }
    
    // Create the user info pane
    $vars['user_info_pane'] = theme('forum_user', $vars['account']);   
             
    // Because the $links array isn't available here, we recreate it
    $links = module_invoke_all('link', 'comment', $vars['comment'], 1);
    foreach (module_implements('link_alter') as $module) {
      $function = $module .'_link_alter';
      $function($node, $links);
    }
    unset($links['comment_parent']);
    $vars['links'] = theme('links', $links, array('class' => 'links forumlinks'));
    $vars['links_array'] = $links;
    

    // Comment number with link
    if (!isset($post_number)) {
      static $post_number = 0;
    }
    _topic_nid($vars['node']->nid);

    $post_per_page = _comment_get_display_setting('comments_per_page', $vars['node']);
    $page_number = $_GET['page'];
    if (!$page_number) { 
      $page_number = 0; 
    }
    
    $post_number++;
    $fragment = 'comment-' . $vars['comment']->cid;
    $query = ($page_number) ? 'page=' . $page_number : NULL;
    $linktext = '#' . (($page_number * $post_per_page) + $post_number);
    $linkpath = 'node/' . _topic_nid();
    $vars['comment_link'] = l($linktext, $linkpath, NULL, $query, $fragment);

    // Link to page created by Comment Page module, if it exists
    if (!empty($vars['comment']->page_url) && !(arg(0) == 'comment' && arg(1) == $vars['comment']->cid)) {
      $variables['page_link'] = l('(permalink)', $vars['comment']->page_url);
    }
  }
}

/**
 * D5 compatability wrapper for forum user preprocess function.
 */
function theme_forum_user($account) {
  $variables = array();
  $variables['account'] = $account;

  // Call our preprocess function to create all the variables
  template_preprocess_forum_user($variables);
    
  // Send the variables to the advf-forum-user.tpl.php
  $forum_theme =  advanced_forum_get_forum_theme_directory();
  return _phptemplate_callback("advf_forum_user", $variables, array("$forum_theme/advf-forum-user"));
}

function template_preprocess_forum_user(&$variables) {
  // The passed in $variables['account'] refers to the user who's info is in the pane.
  $account = $variables['account'];
  $accountid = $account->uid;
  
  // Get a reference to the currently logged in user.
  global $user;
  
  // Username
  $variables['name_raw'] =  theme('username', $account);
  $variables['name'] =  '<div class="username">' .$variables['name_raw'] . '</div>';
   
  // Avatar
  $variables['picture'] = theme('user_picture', $account);

  // Nothing else applies to anon users, so just stop here
  if ($accountid == 0) {
    return;
  }
  
  $themedir =  advanced_forum_get_forum_theme_directory();

  // Join date / since
  $variables['joined_raw'] = format_date($account->created, 'custom', 'Y-m-d');
  $variables['joined'] = '<div class="account-joined"><strong>' . t('Joined: ') . '</strong>' . $variables['joined_raw'] . '</div>';

  $variables['member_since_raw'] = format_interval(time() - $account->created);
  $variables['member_since'] = '<div class="account-member-since">' . t('Member since: ') . $variables['member_since_raw'] . '</div>';
  
  // Online status
  if (round((time()-$account->access)/60) < 15) {
    $variables['online_class'] = 'user-online';
    $variables['online_icon'] = theme('image', advanced_forum_theme_path() . '/' . $themedir . '/images/status_online.png', 'User is online', 'User is online', NULL, TRUE);
    $variables['online_text'] = t('Online');
    $variables['online_status'] = '<div class="user-online">' . $variables['online_icon'] . ' ' . $variables['online_text'] . '</div>';
  } else {
    $variables['online_class'] = 'user-offline';
    $variables['online_icon'] = theme('image', advanced_forum_theme_path() . '/' . $themedir . '/images/status_offline.png', 'User is offline', 'User is offline', NULL, TRUE);
    $variables['online_text'] = t('Offline');
    $variables['online_status'] = '<div class="user-offline">' . $variables['online_icon'] . ' ' . $variables['online_text'] . '</div>';
  }

  // Profile
  if (module_exists('profile')) {
    $variables['profile'] = profile_view_profile($account);
  }
  
  // Points
  if (module_exists('userpoints')) {
    $variables['points_raw'] = userpoints_get_current_points($accountid);
    $variables['points'] = '<div class="user-points"><strong>' . t('Points: ') . '</strong>' . $variables['points_raw'] . '</div>';
  }

  // Posts / IP
  if (module_exists('user_stats')) {
    $variables['posts_raw'] = user_stats_get_stats('post_count', $accountid);
    $variables['posts'] = '<div class="user-posts"><strong>' . t('Posts: ') . '</strong>' . $variables['posts_raw'] . '</div>';
    
    // IP is only visible if the viewer has access, so do an extra check
    $ip = user_stats_get_stats('ip_address', $accountid);
    if (!empty($ip)) {
      $variables['ip_raw'] = $ip;
      $variables['ip'] = '<div class="user-ip"><strong>' . t('IP: ') . '</strong>' . $variables['ip_raw'] . '</div>';
    }
  }
 
  // Title
  if (module_exists('user_titles')) {
    $variables['user_title_raw'] = user_titles_get_user_title($accountid);
    $variables['user_title'] = '<div class="user-title">' . $variables['user_title_raw'] . '</div>';
  }

  // Badges
  if (module_exists('user_badges')) {
    $variables['user_badges_raw'] = user_badges_for_uid($accountid);
    $variables['user_badges'] = '<div class="user-badges">' . $variables['user_badges_raw'] . '</div>';
  }

  // Contact user
  if (module_exists('contact') && ($account->contact) && ($account->uid != $user->uid) && ($user->uid != 0)) {
    $variables['contact_class'] = "contact";
    $variables['contact_icon'] = theme('image', advanced_forum_theme_path() . '/' . $themedir . "/images/email.png", 'Email', 'Email', NULL, TRUE);
    $variables['contact_text'] = t('Email');
    $variables['contact_link'] = 'user/'. $accountid . '/contact';
    $variables['contact'] = '<div class="contact">' . 
                          l($variables['contact_icon'] . ' '  . $variables['contact_text'], $variables['contact_link'], NULL, NULL, NULL, NULL, TRUE) . 
                          '</div>';
  }
           
  // Send private message
  if (module_exists('privatemsg') && 
     ($account->uid != $user->uid) && 
     user_access('access private messages') && 
     (isset($account->privatemsg_allow) ? $account->privatemsg_allow : 1)) { 
    $variables['privatemsg_icon'] = theme('image', advanced_forum_theme_path() . '/' . $themedir . "/images/user_comment.png", 'Private Message', 'Private Message', NULL, TRUE);
    $variables['privatemsg_text'] = t('Send PM');
    $variables['privatemsg_link'] = 'privatemsg/new/'. $accountid;
    $variables['privatemsg'] = '<div class="privatemsg">' . 
      l($variables['privatemsg_icon'] . ' '  . 
      $variables['privatemsg_text'], $variables['privatemsg_link'],NULL,NULL,NULL,NULL,TRUE) . '</div>';
  }

  // Add / remove from buddylist
  if (module_exists('buddylist')) {
  
    if (user_access('maintain buddy list') && @in_array($accountid, array_keys(buddylist_get_buddies($user->uid)))) {
      // Remove buddy
      $variables['buddylist_class'] = "buddy-remove";
      $variables['buddylist_icon'] = theme('image', advanced_forum_theme_path() . '/' . $themedir . "/images/group_delete.png", 'Remove Buddy', 'Remove Buddy', NULL, TRUE);
      $variables['buddylist_text'] = t('Remove buddy');
      $variables['buddylist_link'] = 'buddy/delete/'. $accountid;
    } else {
      // Add buddy
      if ($accountid != $user->uid && user_access('maintain buddy list')) {
        $variables['buddylist_class'] = "buddy-add";
        $variables['buddylist_icon'] = theme('image', advanced_forum_theme_path() . '/' . $themedir . "/images/group_add.png", 'Add to buddy list', 'Add to buddy list', NULL, TRUE);
        $variables['buddylist_text'] = t('Add buddy');
        $variables['buddylist_link'] = 'buddy/add/'. $accountid;
      }
    }
    
    $variables['buddylist'] = '<div class="' . $variables['buddylist_class'] . '">' . 
                         l($variables['buddylist_icon'] . ' '  . $variables['buddylist_text'], $variables['buddylist_link'],NULL,NULL,NULL,NULL,TRUE) . 
                         '</div>';
  } 
  // Subscribe to user's posts 
  // D6 alert: this assumes forum type.
  if (module_exists('subscriptions')) { 
    if (user_access('subscribe to content types')) {
      $variables['subscribe_link'] = "subscriptions/add/type/forum/" . $account->uid;
      $variables['subscribe'] = l(t("Subscribe"), $variables['subscribe_link'], array('title' => 'Subscribe to forum posts by this user'));
    }
  }

}

/********************** FORUM MODULE THEME OVERRIDES *************************/

// Add in the D6 backports from the forum, taxonomy, and comment modules
include_once drupal_get_path('module', 'advanced_forum') .'/d6_compat.inc';

/**
 * Implementation of theme_forum_display
 */
function phptemplate_forum_display($forums, $topics, $parents, $tid, $sortby, $forum_per_page) {
  // Create a $variables array from the parameters
  $variables['forums'] = $forums;
  $variables['topics'] = $topics;
  $variables['parents'] = $parents;
  $variables['tid'] = $tid;
  $variables['sortby'] = $sortby;
  $variables['forum_per_page'] = $forum_per_page;
   
  // Pass the parameters into the D6 preprocess function
  template_preprocess_forums($variables);

  // Pass the parameters into our preprocess function
  advanced_forum_preprocess_forums($variables);

  // Look for the .tpl file in the theme. If found, use it. If not found, default
  // to the stock forum code and put up a warning.
  $forum_theme = advanced_forum_get_forum_theme_directory();
  if (file_exists(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forums.tpl.php")) {
    return _phptemplate_callback('advf_forums', $variables, array("$forum_theme/advf-forums"));
  } else {
    drupal_set_message(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forums.tpl.php not found. Defaulting to stock page.", "error");
    return theme_forum_display($forums, $topics, $parents, $tid, $sortby, $forum_per_page);
  }
}

function advanced_forum_preprocess_forums(&$variables) {
  if (empty($variables['topics'])) {
    // We don't want the links on the top of the forum overview
    $variables['links_orig'] = $variables['links'];
    $variables['links'] = array();
  } else {
    // Grab the forum description and make it available to the template file
    $forum = taxonomy_get_term($variables['tid']);
    $variables['forum_description'] = $forum->description;
  }

  // Add in the mark as read link
  global $user;
  if (user_access('access content') && $user->uid) {
    $tid = $variables['tid'];
    if ($tid) {
      $title = t('Mark all topics read');
      $link = "forum/markasread/$tid";
    } else {
      $title = t('Mark all forums read');
      $link = "forum/markasread";
    }
    $variables['links']['markasread'] = array('title' => $title, 'href'=>$link);
    $variables['links_orig']['markasread'] = array('title' => $title, 'href'=>$link);
  }
}

/**
 * Implementation of theme_forum_list
 */
function phptemplate_forum_list($forums, $parents, $tid) {
  // Create a $variables array from the parameters
  $variables['forums'] = $forums;
  $variables['parents'] = $parents;
  $variables['tid'] = $tid;

  // Pass the parameters into the D6 preprocess function
  template_preprocess_forum_list($variables);
   
  // Pass the parameters into our preprocess function
  advanced_forum_preprocess_forum_list($variables);
   
  // Look for the .tpl file in the theme. If found, use it. If not found, default
  // to the stock forum code and put up a warning.
  $forum_theme = advanced_forum_get_forum_theme_directory();
  if (file_exists(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-list.tpl.php")) {
    return _phptemplate_callback("advf_forum_list", $variables, array("$forum_theme/advf-forum-list"));
  } else {
    drupal_set_message(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-list.tpl.php not found. Defaulting to stock page.", "error");
    return theme_forum_list($forums, $parents, $tid);
  }
}

function advanced_forum_preprocess_forum_list(&$variables) {
  // Add in a link to the last topic in each forum
  $last_topics = advanced_forum_get_all_last_topics();
  foreach ($variables['forums'] as $tid => $forum) {
    // In the forum overview, we want to overwrite the last reply with our custom one
    $variables['forums'][$tid]->last_reply = theme('forum_submitted', $last_topics[$tid]);
  }
}

/*
 * D5 compatability wrapper for theme_forum_submitted.
 * Note: this function does not exist at all in D5's forum.module
 */
function phptemplate_forum_submitted($topic) {
  // Create a $variables array from the parameters
  $variables['topic'] = $topic;
   
  // Pass the parameters into the D6 preprocess function
  template_preprocess_forum_submitted($variables);
 
  // Pass the parameters into our preprocess function
  advanced_forum_preprocess_forum_submitted($variables);

  // Look for the .tpl file in the theme. If found, use it. If not found, 
  // just warn because there is no stock code to default to.
  $forum_theme = advanced_forum_get_forum_theme_directory();
  if (file_exists(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-submitted.tpl.php")) {
    return _phptemplate_callback("advf_forum_submitted", $variables, array("$forum_theme/advf-forum-submitted"));
  } else {
    drupal_set_message(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-submitted.tpl.php not found.", "error");
    return 'MISSING TPL';
  }
}

function advanced_forum_preprocess_forum_submitted(&$variables) {
  if ($variables['topic']->topicid) {
    // This was called by advforum and has the extra variables we need for the forum last topic
    $shorttitle =  truncate_utf8($variables['topic']->topictitle, 15, TRUE, TRUE);
    $variables['topiclink'] = l($shorttitle, "node/" . $variables['topic']->topicid);
  }
}

/**
 * Implementation of theme_forum_topic_list
 */
function phptemplate_forum_topic_list($tid, $topics, $sortby, $forum_per_page) {
  // Create a $variables array from the parameters
  $variables['tid'] = $tid;
  $variables['topics'] = $topics;
  $variables['sortby'] = $sortby;
  $variables['forum_per_page'] = $forum_per_page;
   
  // Pass the parameters into the D6 preprocess function
  template_preprocess_forum_topic_list($variables);
  
  // Pass the parameters into our preprocess function
  advanced_forum_preprocess_forum_topic_list($variables);
      
  // Look for the .tpl file in the theme. If found, use it. If not found, default
  // to the stock forum code and put up a warning.
  $forum_theme = advanced_forum_get_forum_theme_directory();
  if (file_exists(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-topic-list.tpl.php")) {
    return _phptemplate_callback("advf_forum_topic_list", $variables, array("$forum_theme/advf-forum-topic-list"));
  } else {
    drupal_set_message(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-topic-list.tpl.php not found. Defaulting to stock page.", "error");
    return theme_forum_topic_list($tid, $topics, $sortby, $forum_per_page);
  }
}

function advanced_forum_preprocess_forum_topic_list(&$variables) {
  // Grab the forum description and make it available to the template file
  $forum = taxonomy_get_term($variables['topic_id']);
  $variables['forum_description'] = $forum->description;
  
  // Do our own topic processing.
  if (!empty($variables['topics'])) {
    $row = 0;
      
    // Find out how many pages to show on the topic pager. We do this outside
    // the loop because it will be the same for all topics.
    $max_pages_to_display = variable_get('advforum_topic_pager_max', 5);
    
    foreach ($variables['topics'] as $id => $topic) {
      
      // Find the number of comments per page for the node type of the topic.
      // It's the same for all types in D5, but varies in D6.
      $comments_per_page = _comment_get_display_setting('comments_per_page', $topic);
      
      if ($max_pages_to_display > 0 && $topic->num_comments > $comments_per_page) {
        // Topic has more than one page and a pager is wanted. Start off the
        // first page because that doesn't have a query.
        $pager_array = array();
        $current_display_page = 1;
        $pager_array[] = l('1', "node/$topic->nid");
        
        // Find the ending point. The pager URL is always 1 less than
        // the number being displayed because the first page is 0.
        $last_display_page = ceil($topic->num_comments / $comments_per_page);
        $last_pager_page = $last_display_page - 1;
        
        // Add pages until we run out or until we hit the max to show.
        while (($current_display_page < $last_display_page) && ($current_display_page < $max_pages_to_display)) {
          // Move to the next page
          $current_display_page++;
          
          // The page number we link to is 1 less than what's displayed
          $link_to_page = $current_display_page - 1;
          
          // Add the link to the array
          $pager_array[] =  l($current_display_page, "node/$topic->nid", NULL, 'page=' . $link_to_page);
        }
        
        // Move to the next page
        $current_display_page++;
            
        if ($current_display_page == $last_display_page) {
          // We are one past the max to display, but it's the last page,
          // so putting the ...last is silly. Just display it normally.
          $link_to_page = $current_display_page - 1;
          $pager_array[] =  l($current_display_page, "node/$topic->nid", NULL, 'page=' . $link_to_page);
        }

        $pager_last = '';
        if ($current_display_page < $last_display_page) {
          // We are one past the max to display and still aren't
          // on the last page, so put in ... Last Page(N)
          $text = t('Last Page') . '(' . $last_display_page . ')';
          $pager_last = ' &hellip; ' . l($text, "node/$topic->nid", NULL, 'page=' . $last_pager_page);
        }
            
        // Put it all together
        $variables['topics'][$id]->pager = '[' . t('Page') . ' '. implode(", ", $pager_array) . $pager_last . ']';
      }
     
      // Make shadow copy point to actual thread and tell you new the forum name
      if ($variables['topics'][$id]->moved == TRUE) {
        $term = taxonomy_get_term($topic->tid);
        $variables['topics'][$id]->message = l(t('This topic has been moved to ') . $term->name, "node/$topic->nid");
      }
    }
  }
}

/**
 * Implementation of theme_forum_topic_navigation
 */
function phptemplate_forum_topic_navigation($node) {
  // Removes post title navigation from forum posts.
  return ;
}

/**
 * Implementation of theme_forum_icon
 */
function phptemplate_forum_icon($new_posts, $num_posts = 0, $comment_mode = 0, $sticky = 0) {
  // Create a $variables array from the parameters
  $variables['new_posts'] = $new_posts;
  $variables['num_posts'] = $num_posts;
  $variables['comment_mode'] = $comment_mode;
  $variables['sticky'] = $sticky;
   
  // Pass the parameters into the D6 preprocess function
  template_preprocess_forum_icon($variables);

  // Pass the parameters into our preprocess function
  advanced_forum_preprocess_forum_icon($variables);

  // Look for the .tpl file in the theme. If found, use it. If not found, default
  // to the stock forum code and put up a warning.
  $forum_theme = advanced_forum_get_forum_theme_directory();
  if (file_exists(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-icon.tpl.php")) {
    return _phptemplate_callback("advf_forum_icon", $variables, array("$forum_theme/advf-forum-icon"));
  } else {
    drupal_set_message(advanced_forum_theme_path() . '/' . $forum_theme . "/advf-forum-icon.tpl.php not found. Defaulting to stock page.", "error");
    return theme_forum_icon($new_posts, $num_posts = 0, $comment_mode = 0, $sticky = 0);
  }
}

function advanced_forum_preprocess_forum_icon(&$variables) {
  // Find the icons for the forums by looking first in the theme and then
  // in the module. Use a static variable to hold the path so we don't need
  // to go through the process for each icon on the page.
  static $iconpath;
  if (!isset($iconpath)) {
    $iconpath = advanced_forum_theme_path() . '/' . advanced_forum_get_forum_theme_directory() . '/images';
    if (!file_exists($iconpath)) {
      $iconpath = drupal_get_path('module', 'advanced_forum') . '/themes/advforum/images';
    }
  }
  $variables['iconpath'] = $iconpath;
  
  return;
}

/*****************************************************************************/
/*********************** ADDED FUNCTIONALITY *********************************/
/*****************************************************************************/

/**
 * Marks all posts in forums or in a given forum as read by the current user.
 */
function advanced_forum_markasread() {
  global $user;
  $tid = arg(2);

  $sql = 'REPLACE INTO {history} (uid,nid,timestamp)'
         .' SELECT %d, n.nid, %d FROM {node} n'
         .($tid ? ' INNER JOIN {term_node} r ON n.nid=r.nid' : '')
         .' INNER JOIN {node_comment_statistics} l ON l.nid=n.nid'
         .' WHERE (n.created > %d'
         .' OR l.last_comment_timestamp > %d)';
  $args = array($user->uid, time(), NODE_NEW_LIMIT, NODE_NEW_LIMIT);

  if ($tid) {
    $sql .= ' AND r.tid = %d';
    $args[] = $tid;
  }
  
  //*D6* Need to change this for all forum types
  $type = 'forum';
  $sql .= ' AND n.type = \'%s\'';
  $args[] = $type;

  db_query($sql, $args);
  
  if ($tid) {
    drupal_set_message(t('All topics in forum marked as read'));
    drupal_goto('forum/'.$tid);
  } else {
    drupal_set_message(t('All forum posts have been marked as read'));
    drupal_goto('forum');
  }
  
  drupal_goto('forum');
}

/**
 * Returns information about the last updated topics in all forums.
 */
function advanced_forum_get_all_last_topics() {
  // Query the info about the latest topic for the given forum
  $query = "
    SELECT n.title AS topictitle, 
           r.title AS replytitle, 
           r.time timestamp, 
           r.type AS replytype, 
           n.type AS topictype, 
           n.nid AS topicid, 
           t.tid, 
           r.cid AS cid, 
           r.uid,
           u.name
    FROM {node} AS n 
    INNER JOIN 
      (
        (SELECT title, 
                created AS time,
                nid, 
                uid, 
                type, 
                'cid' AS cid 
         FROM {node}
         )
         UNION 
         (SELECT subject, 
                  timestamp, 
                  nid, 
                  uid, 
                  'comment', 
                  cid 
           FROM {comments}
           WHERE {comments}.status = %d
         ) 
         ORDER BY time DESC
      ) AS r ON n.nid=r.nid 
      INNER JOIN {term_node} AS t ON n.nid = t.nid 
      INNER JOIN {users} AS u ON r.uid = u.uid
      WHERE n.status = 1 
      GROUP BY tid;";

  $result = db_query($query, COMMENT_PUBLISHED);
  $topics = array();
  while ($topic = db_fetch_object($result)) {
    $topics[$topic->tid] = $topic;
  }   

  return $topics;
}

/*****************************************************************************/
/****************************** HELPERS **************************************/
/*****************************************************************************/

/**
 * This function returns true if we are in the forums
 */
function _is_forum($hook, $vars) {
  // Setting this static means the check only needs to be done once per page
  // as long as we haven't hit a non forum node on the page
  static $forum_node_id;
  
  switch ($hook) {
    case 'node':
      // Make sure this is a forum node type and that it's not being
      // shown on some other page (like a view or promoted to front page)
      if (($vars['node']->type == 'forum') && arg(0) == 'node' && is_numeric(arg(1))) {
        $forum_node_id = $vars['node']->nid;
        return true;
      } else {
        // In D5, only forum types allowed in the forums so
        // we know this isn't a forum thread (or that it's not in the forums).
        // Will need to revisit in D6.
        unset($forum_node_id);
        return false;
      }
      
    case 'comment':
      if (isset($forum_node_id)) {
        // We already know the node ID of the forum
        // thread on this page, we just need to see
        // if this comment goes with it.
        return $vars['comment']->nid == $forum_node_id;
      } else {
        if (variable_get("advanced_forum_theme_all_comments", 1) == 1) {
          return true;
        } else {
          if (arg(0) == 'comment' && is_numeric(arg(1))) {
            $forum_node_id = $vars['comment']->nid;
            return true;
          }
        }
        return false;
      }
    
    default:
      return false;
  }
}

/**
 * Helper function to hold the node ID of the thread we are on.
 * Used for linking the comment numbers.
 */
function _topic_nid($nodeid = 0) {
  static $nid;
  
  if (!empty($nodeid)) {
    $nid = $nodeid;
  }
  
  return $nid;
}

/**
 * Return the directory of the forum theme files.
 */
function advanced_forum_get_forum_theme_directory() {
  return variable_get('advanced_forum_themedir','advforum');
}

function advanced_forum_add_css() {
  // Find the CSS files for the forums by looking first in the theme and then
  // in the module.
  $csspath = advanced_forum_theme_path() . '/' . advanced_forum_get_forum_theme_directory();
  if (!file_exists($csspath)) {
    $csspath = drupal_get_path('module', 'advanced_forum') . '/themes/advforum';
  }

  // Load the structural CSS (heights, floats, padding, margins, etc)
  drupal_add_css($csspath . '/advanced_forum-structure.css');
  
  // Add on the colors and graphics part
  drupal_add_css($csspath . '/advanced_forum.css');
}

function advanced_forum_theme_path() {
  // Create this as a static variable since it's used a lot on one page
  static $advanced_forum_theme_path;
  
  // If we already stored the path, just send it back
  if (isset($advanced_forum_theme_path)) {
    return $advanced_forum_theme_path;
  }
  
  // Check first if there is a subtheme. This function is defined in Zen
  // and potentially may exist in other themes with subthemes.
  init_theme();
  if (function_exists("path_to_subtheme")) {
    $advanced_forum_theme_path = path_to_subtheme();
  }
  
  // If we had no luck finding a subtheme, find the theme path
  // the normal way.
  if (empty($advanced_forum_theme_path)) {
    $advanced_forum_theme_path = path_to_theme();
  }
  return $advanced_forum_theme_path;
}

function advanced_forum_first_new_comment($nid, $timestamp = 0) {
  global $user;

  if ($user->uid) {
    // Retrieve the timestamp at which the current user last viewed the
    // specified node.
    if (!$timestamp) {
      $timestamp = node_last_viewed($nid);
    }
    $timestamp = ($timestamp > NODE_NEW_LIMIT ? $timestamp : NODE_NEW_LIMIT);

    // Use the timestamp to retrieve the oldest new comment.
    $result = db_result(db_query('SELECT c.cid FROM {node} n INNER JOIN {comments} c ON n.nid = c.nid WHERE n.nid = %d AND timestamp > %d AND c.status = %d ORDER BY c.cid LIMIT 1', $nid, $timestamp, COMMENT_PUBLISHED));

    return $result;
  }
  else {
    return 0;
  }

}